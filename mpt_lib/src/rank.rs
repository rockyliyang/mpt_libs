use std::cmp::Ordering;

use crate::{
    enums::{ClRankType, Errors},
    MPTCalculator,
};
use math::round;

fn percentile_rank(rank: &mut Vec<f64>) {
    let d_max_op = rank
        .iter()
        .filter(|x| (**x).is_finite())
        .max_by(|x, y| x.total_cmp(&y));

    if d_max_op.is_none() {
        rank.fill(f64::NAN);
        return;
    }
    let d_max = *d_max_op.unwrap();
    let d_min = *rank
        .iter()
        .filter(|x| (**x).is_finite())
        .min_by(|x, y| x.total_cmp(&y))
        .unwrap();

    if d_max.eq(&d_min) {
        rank.fill(1.0);
    } else {
        rank.iter_mut().for_each(|x| {
            if x.is_finite() {
                if MPTCalculator::is_eq_double(d_max, d_min) || MPTCalculator::is_eq_double(*x, 1.0)
                {
                    *x = 1.0;
                } else {
                    *x = round::ceil(
                        round::half_away_from_zero((*x - 1.0) / (d_max - 1.0) * 100.0, 5),
                        0,
                    );
                }
                if *x > 100.0 {
                    *x = 100.0;
                }
            }
        })
    }
}

fn absolute_rank_internal(
    values: &[f64],
    rank: &mut Vec<f64>,
    sort_values: &mut Vec<(f64, usize)>,
    is_asc: bool,
) {
    values
        .iter()
        .scan(0 as usize, |state, &v| {
            let t = (v, *state);
            *state = *state + 1;
            sort_values.push(t);
            Some(t)
        })
        .count();

    if is_asc {
        sort_values.sort_by(|a, b| a.0.total_cmp(&b.0))
    } else {
        sort_values.sort_by(|a, b| {
            if a.0.is_finite() && b.0.is_finite() {
                b.0.total_cmp(&a.0)
            } else if !b.0.is_finite() {
                Ordering::Less
            } else {
                Ordering::Equal
            }
        })
    }

    /*let mut rank_value = 1.0;
    let mut v_samed = 1.0;
    for i in 0..sort_values.len() {
        if (i == 0) {
            rank[sort_values[i].1] = rank_value;
        } else {
            if sort_values[i].0.eq(&sort_values[i-1].0) {
                rank[sort_values[i].1] = rank_value;
                v_samed = v_samed + 1.0
            }
            else {
                rank_value = rank_value + v_samed;
                v_samed = 1.0;
                rank[sort_values[i].1] = rank_value;
            }
        }

    }*/
    let mut rank_value = 1.0;
    let mut v_samed = 1.0;
    sort_values
        .iter()
        .scan(f64::INFINITY, |i, v| {
            if i.is_infinite() {
                rank[v.1] = rank_value;
            } else {
                if !v.0.is_infinite() {
                    if MPTCalculator::is_eq_double(v.0, *i) {
                        v_samed = v_samed + 1.0;
                    } else {
                        rank_value = rank_value + v_samed;
                        v_samed = 1.0;
                    }
                    rank[v.1] = rank_value;
                } else {
                    rank[v.1] = v.0;
                }
            }

            if v.0.is_finite() {
                *i = v.0;
            }

            Some(rank_value)
        })
        .count();
}

fn rank_internal(
    values: &[f64],
    rank_type_enum: &Option<ClRankType>,
    rank_vec: &mut Vec<f64>,
    sort_values: &mut Vec<(f64, usize)>,
) -> Errors {
    let is_asc;
    match rank_type_enum {
        Some(ClRankType::ClRankTypeDec)
        | Some(ClRankType::ClRankTypePercDec)
        | Some(ClRankType::ClRankTypeDecDec)
        | Some(ClRankType::ClRankTypeQuinDec)
        | Some(ClRankType::ClRankTypeQuartDec) => is_asc = false,
        Some(ClRankType::ClRankTypeAsc)
        | Some(ClRankType::ClRankTypePercAsc)
        | Some(ClRankType::ClRankTypeDecAsc)
        | Some(ClRankType::ClRankTypeQuinAsc)
        | Some(ClRankType::ClRankTypeQuartAsc) => {
            is_asc = true;
        }
        _ => {
            return Errors::ClErrorCodeNoError;
        }
    }

    match rank_type_enum {
        Some(ClRankType::ClRankTypeAsc) | Some(ClRankType::ClRankTypeDec) => {
            absolute_rank_internal(values, rank_vec, sort_values, is_asc);
        }
        Some(ClRankType::ClRankTypePercAsc) | Some(ClRankType::ClRankTypePercDec) => {
            absolute_rank_internal(values, rank_vec, sort_values, is_asc);
            percentile_rank(rank_vec);
        }
        Some(ClRankType::ClRankTypeDecAsc) | Some(ClRankType::ClRankTypeDecDec) => {
            absolute_rank_internal(values, rank_vec, sort_values, is_asc);
            percentile_rank(rank_vec);
            rank_vec
                .iter_mut()
                .filter(|x| x.is_finite())
                .for_each(|x| *x = round::ceil(*x / 10.0, 0))
        }
        Some(ClRankType::ClRankTypeQuinAsc) | Some(ClRankType::ClRankTypeQuinDec) => {
            absolute_rank_internal(values, rank_vec, sort_values, is_asc);
            percentile_rank(rank_vec);
            rank_vec
                .iter_mut()
                .filter(|x| x.is_finite())
                .for_each(|x| *x = round::ceil(*x / 20.0, 0))
        }
        Some(ClRankType::ClRankTypeQuartAsc) | Some(ClRankType::ClRankTypeQuartDec) => {
            absolute_rank_internal(values, rank_vec, sort_values, is_asc);
            percentile_rank(rank_vec);
            rank_vec
                .iter_mut()
                .filter(|x| x.is_finite())
                .for_each(|x| *x = round::ceil(*x / 25.0, 0))
        }
        _ => {
            return Errors::ClErrorCodeNoError;
        }
    }
    Errors::ClErrorCodeNoError
}

fn frac_rank_internal(
    values: &[f64],
    fact_weights: &[f64],
    sort_values: &mut Vec<(f64, f64, usize)>,
    rank: &mut Vec<f64>,
    is_asc: bool,
) {
    let mut pos = 0 as usize;
    values.iter().for_each(|x| {
        sort_values.push((*x, fact_weights[pos], pos));
        pos += 1;
    });

    if is_asc {
        sort_values.sort_by(|a, b| {
            let mut o = a.0.total_cmp(&b.0);
            if o == Ordering::Equal {
                o = a.1.total_cmp(&b.1);
            }
            o
        });
    } else {
        sort_values.sort_by(|a, b| {
            if a.0.is_finite() && b.0.is_finite() {
                let mut o = b.0.total_cmp(&a.0);
                if o == Ordering::Equal {
                    o = b.1.total_cmp(&a.1);
                }
                o
            } else if !b.0.is_finite() {
                Ordering::Less
            } else {
                Ordering::Equal
            }
        })
    }

    let final_comu_weight: Vec<f64> = sort_values
        .iter()
        .scan((f64::INFINITY, f64::INFINITY), |acc, x| {
            if acc.0.is_finite() && acc.1.is_finite() {
                (*acc).0 = x.0;
                (*acc).1 = x.1;
                Some(x.1)
            } else {
                (*acc).1 = (*acc).1 + x.1;
                if x.0.eq(&(*acc).0) {
                    Some(x.1)
                } else {
                    Some((*acc).1)
                }
            }
        })
        .collect();

    rank.resize(final_comu_weight.len(), f64::INFINITY);
    let min_weight = final_comu_weight.first().unwrap();
    let max_weight = final_comu_weight.last().unwrap();

    let i = 0 as usize;
    if (*min_weight).eq(&max_weight) {
        rank.fill(1.0);
    } else {
        final_comu_weight.iter().for_each(|f| {
            let v = round::ceil(100.0 * (f - min_weight) / (max_weight - min_weight), 0);
            if v.eq(&0.0) {
                rank[i] = 1.0
            } else {
                rank[i] = v;
            }
        });
    }
}

impl<'a> MPTCalculator<'a> {
    ///calculate the absolute rank value of a series not include NAN/INF values.
    ///
    ///# Arguments
    ///
    ///is_asc is the order for sort.
    ///
    ///# Examples
    ///```
    /// use mpt_lib::MPTCalculator;
    /// use mpt_lib::enums::{self, Errors};
    ///const EXPECTED_RES: [f64; 382] = [
    ///        67.0, 84.0, 241.0, 168.0, 39.0, 262.0, 211.0, 198.0, 305.0, 12.0, 339.0, 30.0, 275.0,
    ///        110.0, 103.0, 312.0, 5.0, 374.0, 224.0, 299.0, 87.0, 191.0, 284.0, 206.0, 253.0, 301.0,
    ///        275.0, 260.0, 270.0, 73.0, 236.0, 99.0, 182.0, 52.0, 209.0, 127.0, 201.0, 299.0, 154.0,
    ///        374.0, 1.0, 216.0, 252.0, 17.0, 135.0, 1.0, 323.0, 30.0, 369.0, 164.0, 64.0, 269.0,
    ///        164.0, 172.0, 55.0, 149.0, 15.0, 253.0, 373.0, 28.0, 155.0, 291.0, 280.0, 94.0, 360.0,
    ///        334.0, 382.0, 151.0, 290.0, 107.0, 378.0, 90.0, 159.0, 13.0, 224.0, 318.0, 112.0,
    ///        341.0, 267.0, 344.0, 377.0, 196.0, 49.0, 141.0, 201.0, 362.0, 124.0, 113.0, 174.0,
    ///        361.0, 16.0, 257.0, 376.0, 32.0, 188.0, 380.0, 22.0, 63.0, 287.0, 176.0, 325.0, 126.0,
    ///        90.0, 179.0, 108.0, 218.0, 20.0, 56.0, 48.0, 179.0, 353.0, 215.0, 119.0, 211.0, 349.0,
    ///        58.0, 34.0, 271.0, 182.0, 336.0, 136.0, 368.0, 40.0, 26.0, 253.0, 50.0, 295.0, 201.0,
    ///        332.0, 124.0, 118.0, 217.0, 66.0, 19.0, 17.0, 158.0, 249.0, 47.0, 274.0, 1.0, 335.0,
    ///        316.0, 144.0, 81.0, 146.0, 282.0, 346.0, 343.0, 5.0, 106.0, 370.0, 196.0, 356.0, 294.0,
    ///        69.0, 330.0, 148.0, 298.0, 325.0, 319.0, 356.0, 35.0, 93.0, 315.0, 103.0, 140.0, 297.0,
    ///        113.0, 302.0, 263.0, 327.0, 314.0, 321.0, 88.0, 38.0, 79.0, 211.0, 246.0, 199.0, 72.0,
    ///        53.0, 308.0, 279.0, 233.0, 344.0, 185.0, 150.0, 117.0, 272.0, 292.0, 277.0, 162.0,
    ///        131.0, 169.0, 242.0, 205.0, 163.0, 277.0, 289.0, 372.0, 233.0, 22.0, 94.0, 306.0,
    ///        238.0, 259.0, 310.0, 328.0, 59.0, 83.0, 152.0, 239.0, 287.0, 61.0, 98.0, 313.0, 284.0,
    ///        8.0, 144.0, 121.0, 80.0, 304.0, 351.0, 230.0, 129.0, 130.0, 381.0, 342.0, 235.0, 194.0,
    ///        268.0, 244.0, 379.0, 214.0, 321.0, 247.0, 232.0, 85.0, 94.0, 182.0, 133.0, 22.0, 160.0,
    ///        187.0, 228.0, 132.0, 303.0, 20.0, 100.0, 317.0, 347.0, 64.0, 177.0, 266.0, 281.0,
    ///        142.0, 293.0, 105.0, 1.0, 155.0, 227.0, 50.0, 61.0, 195.0, 250.0, 272.0, 219.0, 181.0,
    ///        111.0, 147.0, 296.0, 122.0, 167.0, 123.0, 190.0, 29.0, 90.0, 113.0, 44.0, 221.0, 41.0,
    ///        250.0, 263.0, 53.0, 10.0, 263.0, 370.0, 175.0, 248.0, 339.0, 69.0, 136.0, 192.0, 329.0,
    ///        14.0, 10.0, 311.0, 138.0, 226.0, 43.0, 35.0, 347.0, 306.0, 324.0, 77.0, 143.0, 204.0,
    ///        367.0, 283.0, 139.0, 42.0, 133.0, 74.0, 56.0, 355.0, 46.0, 358.0, 108.0, 74.0, 193.0,
    ///        221.0, 352.0, 350.0, 240.0, 237.0, 220.0, 166.0, 102.0, 228.0, 157.0, 178.0, 37.0,
    ///        25.0, 82.0, 120.0, 200.0, 338.0, 100.0, 171.0, 366.0, 256.0, 161.0, 223.0, 210.0,
    ///        308.0, 27.0, 78.0, 331.0, 86.0, 76.0, 286.0, 208.0, 337.0, 68.0, 206.0, 186.0, 333.0,
    ///        189.0, 354.0, 364.0, 320.0, 359.0, 33.0, 257.0, 364.0, 169.0, 60.0, 45.0, 5.0, 260.0,
    ///        243.0, 245.0, 113.0, 9.0, 89.0, 94.0, 152.0, 71.0, 127.0, 231.0, 362.0, 173.0,
    ///    ];
    ///
    ///    const DATA: [f64; 382] = [
    ///        -4.14747, -4.48808, -5.89226, -5.31972, -3.79032, -6.08696, -5.714292, -5.6541,
    ///        -6.44905, -1.65468, -6.9869, -3.698444, -6.22951, -4.6875, -4.64701, -6.49606,
    ///        -0.230949, -8.66808, -5.80808, -6.43432, -4.51941, -5.55556, -6.32411, -5.67901,
    ///        -6.043512, -6.43631, -6.22951, -6.07477, -6.13139, -4.21607, -5.85366, -4.57143,
    ///        -5.444657, -4.00276, -5.69767, -4.812467, -5.665031, -6.43432, -5.08021, -8.66808,
    ///        0.000003, -5.73806, -6.03654, -2.908285, -4.8583, 0.000007, -6.61831, -3.69844,
    ///        -7.88177, -5.26316, -4.07808, -6.11746, -5.263168, -5.36364, -4.01009, -5.02901,
    ///        -2.15606, -6.043514, -8.58995, -3.64964, -5.143343, -6.37623, -6.29921, -4.545463,
    ///        -7.48466, -6.814, -14.43396, -5.04386, -6.3762, -4.67797, -8.90688, -4.532588,
    ///        -5.20951, -1.65587, -5.808085, -6.58135, -4.69027, -6.98878, -6.10221, -7.06215,
    ///        -8.84354, -5.65111, -3.99449, -4.92958, -5.665036, -7.75463, -4.79651, -4.694849,
    ///        -5.37736, -7.55668, -2.52226, -6.06509, -8.75203, -3.71267, -5.47667, -11.16585,
    ///        -3.347732, -4.0602, -6.33803, -5.39262, -6.62983, -4.80816, -4.532581, -5.437795,
    ///        -4.68019, -5.74163, -3.344123, -4.01648, -3.98909, -5.43779, -7.33229, -5.73248,
    ///        -4.7191, -5.714295, -7.11111, -4.01786, -3.73514, -6.14035, -5.444654, -6.93493,
    ///        -4.87445, -7.85276, -3.82883, -3.36257, -6.043515, -3.994543, -6.39778, -5.665035,
    ///        -6.74419, -4.796514, -4.71698, -5.74074, -4.08587, -3.33817, -2.90828, -5.17435,
    ///        -6.02583, -3.98489, -6.20805, 0.000004, -6.8917, -6.55629, -4.983396, -4.35459,
    ///        -4.98915, -6.31164, -7.0632, -7.05882, -0.2309446, -4.6729, -8.04795, -5.651113,
    ///        -7.42794, -6.38298, -4.202231, -6.7029, -5.01882, -6.42276, -6.62983, -6.59341,
    ///        -7.42794, -3.73832, -4.53401, -6.54122, -4.64701, -4.89796, -6.42202, -4.694841,
    ///        -6.44139, -6.100223, -6.63507, -6.51409, -6.60793, -4.52261, -3.74153, -4.2735,
    ///        -5.71429, -5.99415, -5.65416, -4.21348, -4.00891, -6.47292, -6.28218, -5.847957,
    ///        -7.06215, -5.46559, -5.03324, -4.69531, -6.14173, -6.37625, -6.27954, -5.23918,
    ///        -4.83651, -5.32258, -5.89286, -5.66667, -5.25409, -6.27954, -6.35135, -8.49546,
    ///        -5.84795, -3.34773, -4.545461, -6.46976, -5.86767, -6.06725, -6.48749, -6.64858,
    ///        -4.02597, -4.42478, -5.049514, -5.87276, -6.33803, -4.050283, -4.56522, -6.50577,
    ///        -6.32411, -1.55258, -4.98339, -4.7486, -4.29066, -6.44666, -7.15596, -5.82121,
    ///        -4.82456, -4.82612, -11.21951, -7.02988, -5.85284, -5.6338, -6.11354, -5.95745,
    ///        -9.25197, -5.716599, -6.60793, -6.00667, -5.84, -4.49612, -4.545457, -5.444651,
    ///        -4.85021, -3.347728, -5.21814, -5.47599, -5.81583, -4.83749, -6.44258, -3.34412,
    ///        -4.59402, -6.55885, -7.07965, -4.078084, -5.40541, -6.1017, -6.30841, -4.969883,
    ///        -6.37627, -4.65116, 0.000001, -5.14334, -5.8156, -3.99454, -4.05028, -5.63486,
    ///        -6.03015, -6.141734, -5.7508, -5.44355, -4.68933, -4.99168, -6.41638, -4.74865,
    ///        -5.2921, -4.75515, -5.54324, -3.67107, -4.532585, -4.694844, -3.93836, -5.775323,
    ///        -3.84615, -6.030154, -6.100227, -4.008915, -1.618582, -6.10022, -8.04795, -5.38922,
    ///        -6.01156, -6.9869, -4.20223, -4.874457, -5.60579, -6.67285, -2.15385, -1.61858,
    ///        -6.48801, -4.8855, -5.81015, -3.8961, -3.738323, -7.07965, -6.46976, -6.62252,
    ///        -4.23729, -4.98084, -5.6664, -7.84077, -6.32384, -4.88911, -3.85064, -4.850213,
    ///        -4.216872, -4.016486, -7.41139, -3.96988, -7.43671, -4.68019, -4.21687, -5.61331,
    ///        -5.77532, -7.27532, -7.12166, -5.87558, -5.85664, -5.76577, -5.28351, -4.59588,
    ///        -5.815833, -5.15638, -5.43188, -3.7415, -3.35135, -4.38067, -4.71914, -5.65657,
    ///        -6.98497, -4.59402, -5.3442, -7.79377, -6.060618, -5.23156, -5.78778, -5.69823,
    ///        -6.47292, -3.45821, -4.24028, -6.72116, -4.51011, -4.22961, -6.32754, -5.6872,
    ///        -6.96296, -4.19274, -5.679014, -5.46875, -6.74646, -5.5371, -7.40203, -7.77903,
    ///        -6.60634, -7.4392, -3.73396, -6.06509, -7.77903, -5.322586, -4.03121, -3.96175,
    ///        -0.230952, -6.07477, -5.91667, -5.96798, -4.694845, -1.61744, -4.53125, -4.545465,
    ///        -5.04951, -4.20463, -4.81246, -5.83039, -7.75463, -5.36981,
    ///    ];
    ///    let mut res = [f64::NAN; DATA.len()];
    ///    let mpt = MPTCalculator::from_v(&DATA);
    ///    let err = mpt.absolute_rank(&[0.0; 0], false, &mut res);
    ///    println!("{:?}", res);
    ///    assert_eq!(
    ///        err == Errors::ClErrorCodeNoError && MPTCalculator::is_eq_double_array(&res, &EXPECTED_RES),
    ///        true
    ///    );
    ///```
    pub fn absolute_rank(
        &self,
        _fractional_weight: &[f64],
        is_asc: bool,
        rank: &mut [f64],
    ) -> Errors {
        let mut rank_vec = vec![0 as f64; self.values.len()];
        let mut sort_values: Vec<(f64, usize)> = Vec::new();

        absolute_rank_internal(self.values, &mut rank_vec, &mut sort_values, is_asc);
        if rank_vec.len() == rank.len() {
            rank_vec.swap_with_slice(rank)
        } else {
            return Errors::ClErrorCodeInvalidPara;
        }

        return Errors::ClErrorCodeNoError;
    }
    ///calculate the position of a value in a series.
    ///
    ///# Arguments
    ///value is the value should be found.
    ///
    ///rank_type is the rank type
    ///
    ///# Examples
    ///```
    /// use mpt_lib::MPTCalculator;
    /// use mpt_lib::enums::{self, Errors};
    ///const DATA: [f64; 382] = [
    ///    -6.50577, -4.51011, -7.07965, -5.65657, -4.98084, -6.32411, -4.69027, -8.58995,
    ///    -6.29921, -5.322586, -6.47292, -7.15596, -7.75463, -5.665036, -5.99415, -5.84795,
    ///    -4.68019, -4.68019, -6.11746, -4.82612, -6.33803, -7.41139, -6.00667, -6.28218,
    ///    -8.84354, -8.66808, -6.814, -3.98489, -6.31164, -7.42794, -5.65416, -4.71698, -6.41638,
    ///    -5.40541, -4.874457, -4.21607, -5.55556, -5.01882, -4.53125, -5.23918, -8.75203,
    ///    -6.43432, -7.43671, -6.63507, -3.35135, -11.21951, -5.71429, -6.42276, -3.98909,
    ///    -4.02597, -7.0632, -5.86767, -6.61831, -4.812467, -6.43432, -5.04386, -5.716599, -5.84,
    ///    -5.76577, -3.93836, -4.83749, -7.11111, -6.07477, -4.694841, -6.06725, -5.32258,
    ///    -6.043512, -6.96296, -3.96175, -5.65111, -6.55885, -7.85276, -7.05882, -6.32754,
    ///    -6.44666, -4.850213, -6.43631, -5.80808, -4.59402, -8.49546, -3.64964, -4.80816,
    ///    -3.71267, -7.07965, -5.43188, -2.908285, -4.65116, -6.51409, -5.54324, -6.10022,
    ///    -6.27954, -4.68933, -0.2309446, -7.77903, -6.14035, -5.6872, -4.01009, -4.81246,
    ///    -5.437795, -4.545457, -1.61858, -5.73806, -6.62252, -6.98878, -1.618582, -6.33803,
    ///    -3.99454, -5.714292, -4.20463, -4.6875, -4.532588, -6.38298, -1.55258, -5.28351,
    ///    -7.48466, -6.47292, -4.83651, -5.04951, -3.82883, -4.216872, -4.016486, -5.47667,
    ///    -5.815833, -4.2735, -4.38067, -5.143343, -4.008915, -3.99449, -5.6338, -3.738323,
    ///    -6.141734, -5.39262, -5.81583, -6.27954, -6.08696, -8.04795, -3.347732, -7.02988,
    ///    -7.33229, -2.15385, -5.6541, -7.42794, -7.06215, -6.20805, -5.89226, -5.17435,
    ///    -5.444654, -3.34773, -7.55668, -3.96988, -5.46559, -4.983396, -6.03654, -5.43779,
    ///    -3.994543, -6.59341, -4.82456, -6.37623, -3.698444, -6.07477, -6.32411, -0.230949,
    ///    -6.02583, -6.9869, -4.67797, -4.694849, -5.20951, -6.100223, -5.78778, -6.32384,
    ///    -7.77903, -3.74153, -14.43396, -6.46976, -4.694845, -6.01156, -3.347728, -4.74865,
    ///    -4.64701, -6.11354, -4.79651, -4.21687, -4.796514, -6.7029, -0.230952, -4.53401,
    ///    -4.98339, -5.83039, -5.66667, -4.89796, -8.90688, -4.14747, -4.03121, -6.22951,
    ///    -9.25197, -5.74163, -5.81015, -6.06509, -6.22951, -4.545465, -4.7191, -4.694844,
    ///    -6.64858, -6.14173, -6.62983, -6.030154, -3.344123, -4.6729, -3.33817, -5.74074,
    ///    -7.12166, -4.8855, -4.99168, -4.532581, -4.24028, -6.98497, -4.29066, -5.89286,
    ///    -6.72116, -5.7508, -5.02901, -4.20223, -5.03324, -4.92958, -4.050283, -3.36257,
    ///    -6.043515, -4.078084, -3.73832, -5.714295, -5.15638, -3.85064, 0.000004, -6.35135,
    ///    -3.73396, -4.35459, -4.00276, -4.88911, -5.049514, -1.65587, 0.000001, -6.3762,
    ///    -6.37625, -3.79032, -7.75463, -4.00891, -6.44139, -5.85366, -5.847957, -6.8917,
    ///    -5.61331, -6.49606, -2.15606, -3.69844, -4.21348, -5.444651, -6.67285, -4.56522,
    ///    -4.85021, -4.969883, -4.51941, -5.95745, -6.37627, -4.532585, -5.25409, -4.05028,
    ///    -5.31972, -6.10221, -4.8583, -5.63486, -5.77532, -5.44355, -4.23729, -4.545463,
    ///    -3.73514, -6.62983, -4.59402, -4.08587, -4.98915, -5.3442, -5.47599, -5.5371,
    ///    -11.16585, -5.85284, -4.7486, -5.808085, -4.49612, -4.64701, -2.52226, -7.40203,
    ///    -4.71914, -5.37736, -6.9869, -6.74419, -6.60793, -6.39778, -4.69531, -4.57143,
    ///    -4.59588, -5.23156, -6.100227, -4.87445, -4.0602, -5.651113, -6.42202, -4.22961,
    ///    -6.13139, -3.34412, -5.263168, -7.06215, -5.665031, -5.6664, -5.775323, -3.8961,
    ///    -1.65468, 0.000003, -6.60634, -7.79377, -5.46875, -5.14334, -6.043514, -4.52261,
    ///    -5.36364, -6.44905, -7.84077, -4.01786, -5.69767, -6.44258, -5.679014, -3.67107,
    ///    -5.73248, -6.46976, -5.91667, -1.61744, -6.1017, -7.4392, -4.19274, -6.060618,
    ///    -6.55629, -6.93493, -3.7415, -6.03015, -8.04795, -8.66808, -3.84615, -5.69823,
    ///    -4.202231, -6.74646, -5.36981, -5.08021, -5.38922, -5.85664, -5.67901, -6.60793,
    ///    -4.07808, -5.21814, -6.30841, -6.06509, -5.96798, -4.01648, -4.75515, -4.545461,
    ///    -4.48808, -2.90828, -6.54122, -6.48801, -5.87276, -6.58135, -5.2921, -5.8156, -4.42478,
    ///    -7.27532, -5.60579, -7.88177, -5.82121, -6.48749, -5.665035, -3.45821, -5.444657,
    ///    -5.26316, -5.87558, 0.000007,
    ///];
    ///let mut res = f64::NAN;
    ///let mpt = MPTCalculator::from_v(&DATA);
    ///let err = mpt.rank_position(-6.406382, 2, &mut res);
    ///assert_eq!(err == Errors::ClErrorCodeNoError && MPTCalculator::is_eq_double(res,87.0), true);
    ///```
    pub fn rank_position(&self, value: f64, rank_type: i16, rank: &mut f64) -> Errors {
        *rank = f64::NAN;

        let rank_type_enum = ClRankType::try_from(rank_type).ok();
        match rank_type_enum {
            Some(ClRankType::ClRankTypeNoRank) | Some(ClRankType::ClRankTypeRaw) => {
                return Errors::ClErrorCodeNoError;
            }
            _ => {}
        }

        let mut rank_vec = vec![0 as f64; self.values.len()];
        let mut sort_values: Vec<(f64, usize)> = Vec::new();
        let ret = rank_internal(
            self.values,
            &rank_type_enum,
            &mut rank_vec,
            &mut sort_values,
        );
        if ret != Errors::ClErrorCodeNoError {
            return ret;
        }

        let is_asc;
        match rank_type_enum {
            Some(ClRankType::ClRankTypeDec)
            | Some(ClRankType::ClRankTypePercDec)
            | Some(ClRankType::ClRankTypeDecDec)
            | Some(ClRankType::ClRankTypeQuinDec)
            | Some(ClRankType::ClRankTypeQuartDec) => is_asc = false,
            Some(ClRankType::ClRankTypeAsc)
            | Some(ClRankType::ClRankTypePercAsc)
            | Some(ClRankType::ClRankTypeDecAsc)
            | Some(ClRankType::ClRankTypeQuinAsc)
            | Some(ClRankType::ClRankTypeQuartAsc) => {
                is_asc = true;
            }
            _ => {
                return Errors::ClErrorCodeNoError;
            }
        }

        let found;
        if is_asc {
            found = sort_values.iter().rfind(|x| x.0.is_finite() && x.0 < value);
        } else {
            found = sort_values.iter().rfind(|x| x.0.is_finite() && x.0 > value);
        }

        match found {
            None => *rank = rank_vec[sort_values[0].1],
            _ => *rank = rank_vec[found.unwrap().1],
        }

        return Errors::ClErrorCodeNoError;
    }
    ///calculate the rank series for a series.
    ///
    ///# Arguments
    ///rank_type is the rank type
    ///
    ///# Examples
    ///```
    /// use mpt_lib::MPTCalculator;
    /// use mpt_lib::enums::{self, Errors};
    ///const DATA: [f64; 180] = [
    ///    2.000, 1.910, 1.790, 1.720, 1.530, 1.450, 1.250, 1.100, 1.080, 1.070, 0.960, 0.960,
    ///    0.920, 0.920, 0.790, 0.650, 0.600, 0.560, 0.440, 0.410, 0.400, 0.400, 0.300, 0.250,
    ///    0.230, 0.230, 0.230, 0.200, 0.160, 0.150, 0.140, 0.110, 0.100, 0.100, 0.100, 0.060,
    ///    0.040, 0.040, 0.040, 0.040, 0.030, 0.010, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    ///    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    ///    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    ///    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    ///    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    ///    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    ///    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    ///    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    ///    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    ///    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    ///    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    ///    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    ///];
    ///
    ///const EXPECTED_RES: [f64; 180] = [
    ///    1.0, 3.0, 5.0, 8.0, 10.0, 12.0, 15.0, 17.0, 20.0, 22.0, 24.0, 24.0, 29.0, 29.0, 34.0,
    ///    36.0, 39.0, 41.0, 43.0, 46.0, 48.0, 48.0, 53.0, 55.0, 58.0, 58.0, 58.0, 65.0, 67.0,
    ///    70.0, 72.0, 74.0, 77.0, 77.0, 77.0, 84.0, 86.0, 86.0, 86.0, 86.0, 96.0, 98.0, 100.0,
    ///    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    ///    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    ///    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    ///    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    ///    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    ///    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    ///    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    ///    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    ///    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    ///    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    ///    100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
    ///    100.0, 100.0, 100.0, 100.0, 100.0,
    ///];
    ///let mut res = [f64::NAN; DATA.len()];
    ///let mpt = MPTCalculator::from_v(&DATA);
    ///let err = mpt.rank(5, &mut res);
    ///assert_eq!(
    ///    err == Errors::ClErrorCodeNoError && MPTCalculator::is_eq_double_array(&res, &EXPECTED_RES),
    ///    true
    ///);
    ///```
    pub fn rank(&self, rank_type: i16, rank: &mut [f64]) -> Errors {
        let rank_type_enum = ClRankType::try_from(rank_type).ok();
        match rank_type_enum {
            Some(ClRankType::ClRankTypeNoRank) | Some(ClRankType::ClRankTypeRaw) => {
                rank.copy_from_slice(&self.values[0..rank.len()]);
                return Errors::ClErrorCodeNoError;
            }
            _ => {}
        }

        let mut rank_vec = vec![0 as f64; self.values.len()];
        let mut sort_values: Vec<(f64, usize)> = Vec::new();
        let ret = rank_internal(
            self.values,
            &rank_type_enum,
            &mut rank_vec,
            &mut sort_values,
        );

        if rank_vec.len() == rank.len() {
            rank_vec.swap_with_slice(rank)
        } else {
            return Errors::ClErrorCodeInvalidPara;
        }

        return ret;
    }

    ///calculate the position of a value in a series.
    ///
    ///# Arguments
    ///value is the value should be found.
    ///
    ///rank_type is the rank type
    ///
    ///# Examples
    ///```
    /// use mpt_lib::MPTCalculator;
    /// use mpt_lib::enums::{self, Errors};
    ///const DATA: [f64; 382] = [
    ///    0.0, 0.0, 0.0, 0.0, -0.23095, -0.23095, -0.23095, -1.55258, -1.61744, -1.61858,
    ///    -1.61858, -1.65468, -1.65587, -2.15385, -2.15606, -2.52226, -2.90828, -2.90828,
    ///    -3.33817, -3.34412, -3.34412, -3.34773, -3.34773, -3.34773, -3.35135, -3.36257,
    ///    -3.45821, -3.64964, -3.67107, -3.69844, -3.69844, -3.71267, -3.73396, -3.73514,
    ///    -3.73832, -3.73832, -3.7415, -3.7415, -3.79032, -3.82883, -3.84615, -3.85064, -3.8961,
    ///    -3.93836, -3.96175, -3.96988, -3.98489, -3.98909, -3.99449, -3.99454, -3.99454,
    ///    -4.00276, -4.00891, -4.00891, -4.01009, -4.01648, -4.01648, -4.01786, -4.02597,
    ///    -4.03121, -4.05028, -4.05028, -4.0602, -4.07808, -4.07808, -4.08587, -4.14747,
    ///    -4.19274, -4.20223, -4.20223, -4.20463, -4.21348, -4.21607, -4.21687, -4.21687,
    ///    -4.22961, -4.23729, -4.24028, -4.2735, -4.29066, -4.35459, -4.38067, -4.42478,
    ///    -4.48808, -4.49612, -4.51011, -4.51941, -4.52261, -4.53125, -4.53258, -4.53258,
    ///    -4.53258, -4.53401, -4.54546, -4.54546, -4.54546, -4.54546, -4.56522, -4.57143,
    ///    -4.59402, -4.59402, -4.59588, -4.64701, -4.64701, -4.65116, -4.6729, -4.67797,
    ///    -4.68019, -4.68019, -4.6875, -4.68933, -4.69027, -4.69484, -4.69484, -4.69484,
    ///    -4.69484, -4.69531, -4.71698, -4.7191, -4.7191, -4.7486, -4.7486, -4.75515, -4.79651,
    ///    -4.79651, -4.80816, -4.81246, -4.81246, -4.82456, -4.82612, -4.83651, -4.83749,
    ///    -4.85021, -4.85021, -4.8583, -4.87445, -4.87445, -4.8855, -4.88911, -4.89796, -4.92958,
    ///    -4.96988, -4.98084, -4.98339, -4.98339, -4.98915, -4.99168, -5.01882, -5.02901,
    ///    -5.03324, -5.04386, -5.04951, -5.04951, -5.08021, -5.14334, -5.14334, -5.15638,
    ///    -5.17435, -5.20951, -5.21814, -5.23156, -5.23918, -5.25409, -5.26316, -5.26316,
    ///    -5.28351, -5.2921, -5.31972, -5.32258, -5.32258, -5.3442, -5.36364, -5.36981, -5.37736,
    ///    -5.38922, -5.39262, -5.40541, -5.43188, -5.43779, -5.43779, -5.44355, -5.44465,
    ///    -5.44465, -5.44465, -5.46559, -5.46875, -5.47599, -5.47667, -5.5371, -5.54324,
    ///    -5.55556, -5.60579, -5.61331, -5.6338, -5.63486, -5.65111, -5.65111, -5.6541, -5.6541,
    ///    -5.65657, -5.66503, -5.66503, -5.66503, -5.6664, -5.66667, -5.67901, -5.67901, -5.6872,
    ///    -5.69767, -5.69823, -5.71429, -5.71429, -5.71429, -5.71659, -5.73248, -5.73806,
    ///    -5.74074, -5.74163, -5.7508, -5.76577, -5.77532, -5.77532, -5.78778, -5.80808,
    ///    -5.80808, -5.81015, -5.8156, -5.81583, -5.81583, -5.82121, -5.83039, -5.84, -5.84795,
    ///    -5.84795, -5.85284, -5.85366, -5.85664, -5.86767, -5.87276, -5.87558, -5.89226,
    ///    -5.89286, -5.91667, -5.95745, -5.96798, -5.99415, -6.00667, -6.01156, -6.02583,
    ///    -6.03015, -6.03015, -6.03654, -6.04351, -6.04351, -6.04351, -6.06061, -6.06509,
    ///    -6.06509, -6.06725, -6.07477, -6.07477, -6.08696, -6.10022, -6.10022, -6.10022,
    ///    -6.1017, -6.10221, -6.11354, -6.11746, -6.13139, -6.14035, -6.14173, -6.14173,
    ///    -6.20805, -6.22951, -6.22951, -6.27954, -6.27954, -6.28218, -6.29921, -6.30841,
    ///    -6.31164, -6.32384, -6.32411, -6.32411, -6.32754, -6.33803, -6.33803, -6.35135,
    ///    -6.3762, -6.3762, -6.3762, -6.3762, -6.38298, -6.39778, -6.41638, -6.42202, -6.42276,
    ///    -6.43432, -6.43432, -6.43631, -6.44139, -6.44258, -6.44666, -6.44905, -6.46976,
    ///    -6.46976, -6.47292, -6.47292, -6.48749, -6.48801, -6.49606, -6.50577, -6.51409,
    ///    -6.54122, -6.55629, -6.55885, -6.58135, -6.59341, -6.60634, -6.60793, -6.60793,
    ///    -6.61831, -6.62252, -6.62983, -6.62983, -6.63507, -6.64858, -6.67285, -6.7029,
    ///    -6.72116, -6.74419, -6.74646, -6.814, -6.8917, -6.93493, -6.96296, -6.98497, -6.9869,
    ///    -6.9869, -6.98878, -7.02988, -7.05882, -7.06215, -7.06215, -7.0632, -7.07965, -7.07965,
    ///    -7.11111, -7.12166, -7.15596, -7.27532, -7.33229, -7.40203, -7.41139, -7.42794,
    ///    -7.42794, -7.43671, -7.4392, -7.48466, -7.55668, -7.75463, -7.75463, -7.77903,
    ///    -7.77903, -7.79377, -7.84077, -7.85276, -7.88177, -8.04795, -8.04795, -8.49546,
    ///    -8.58995, -8.66808, -8.66808, -8.75203, -8.84354, -8.90688, -9.25197, -11.16585,
    ///    -11.21951, -14.43396,
    ///];
    ///
    ///const EXPECTED_RES: [f64; 100] = [
    ///    0.0, -1.55258, -1.65468, -2.52226, -3.34412, -3.34773, -3.45821, -3.69844, -3.73832,
    ///    -3.79032, -3.85064, -3.96988, -3.99454, -4.00891, -4.01786, -4.05028, -4.07808,
    ///    -4.20223, -4.21607, -4.23729, -4.35459, -4.48808, -4.52261, -4.53258, -4.54546,
    ///    -4.59402, -4.64701, -4.67797, -4.68933, -4.69484, -4.7191, -4.7486, -4.80816, -4.82612,
    ///    -4.85021, -4.8855, -4.92958, -4.98339, -5.02901, -5.04951, -5.15638, -5.23156,
    ///    -5.26316, -5.31972, -5.36364, -5.39262, -5.43779, -5.44465, -5.47599, -5.55556,
    ///    -5.63486, -5.6541, -5.66503, -5.67901, -5.69823, -5.71659, -5.74163, -5.77532,
    ///    -5.80808, -5.81583, -5.84795, -5.85664, -5.89226, -5.95745, -6.01156, -6.03654,
    ///    -6.06061, -6.07477, -6.10022, -6.10221, -6.14035, -6.22951, -6.28218, -6.31164,
    ///    -6.32754, -6.3762, -6.38298, -6.42276, -6.43631, -6.44905, -6.47292, -6.50577,
    ///    -6.55885, -6.60793, -6.62252, -6.64858, -6.74419, -6.93493, -6.9869, -7.05882,
    ///    -7.07965, -7.15596, -7.41139, -7.4392, -7.75463, -7.79377, -8.04795, -8.66808,
    ///    -8.90688, -14.43396,
    ///];
    ///let mut res = [f64::NAN; 100];
    ///let mpt = MPTCalculator::from_v(&DATA);
    ///let err = mpt.percentile_rank_breakpoints(&[f64::NAN; 0], false, &mut res);
    ///assert_eq!(
    ///    err == Errors::ClErrorCodeNoError && MPTCalculator::is_eq_double_array(&res, &EXPECTED_RES),
    ///    true
    ///);
    ///```
    pub fn percentile_rank_breakpoints(
        &self,
        _fract_weights: &[f64],
        is_asc: bool,
        break_points: &mut [f64],
    ) -> Errors {
        let mut rank_vec = vec![0 as f64; self.values.len()];
        let mut sort_values: Vec<(f64, usize)> = Vec::new();
        absolute_rank_internal(self.values, &mut rank_vec, &mut sort_values, is_asc);
        percentile_rank(&mut rank_vec);
        if break_points.len() < 100 {
            return Errors::ClErrorCodeInvalidOutput;
        }
        break_points.fill(f64::NAN);
        rank_vec.iter().enumerate().for_each(|x| {
            let pos = *x.1 as usize - 1;
            if !break_points[pos].is_finite() {
                break_points[pos] = self.values[x.0];
            } else if is_asc && self.values[x.0] > break_points[pos] {
                break_points[pos] = self.values[x.0];
            } else if !is_asc && self.values[x.0] < break_points[pos] {
                break_points[pos] = self.values[x.0];
            }
        });
        return Errors::ClErrorCodeNoError;
    }
}

#[cfg(test)]
mod test {
    use math::round;

    use crate::{
        enums::{self, Errors},
        MPTCalculator,
    };

    #[test]
    fn test_ceil() {
        let rounded = round::ceil(3.14159, 3);
        assert_eq!(rounded, 3.142);
        let rounded = round::ceil(3.1411, 3);
        assert_eq!(rounded, 3.142);

        let rounded = round::half_away_from_zero(3.14159, 3);
        assert_eq!(rounded, 3.142);
        let rounded = round::half_away_from_zero(3.1411, 3);
        assert_eq!(rounded, 3.141);
        let d_max = 43.0;
        let mut x = 9.0;
        let t1 = (x - 1.0) / (d_max - 1.0);
        let t2 = round::half_away_from_zero(t1 * 100.0, 5);
        let t3 = round::ceil(t2, 0);
        x = round::ceil(
            round::half_away_from_zero((x - 1.0) / (d_max - 1.0) * 100.0, 5),
            0,
        );
        assert_eq!(x, 19.0);
    }
    #[test]
    fn should_correct_rank() {
        const DATA: [f64; 180] = [
            2.000, 1.910, 1.790, 1.720, 1.530, 1.450, 1.250, 1.100, 1.080, 1.070, 0.960, 0.960,
            0.920, 0.920, 0.790, 0.650, 0.600, 0.560, 0.440, 0.410, 0.400, 0.400, 0.300, 0.250,
            0.230, 0.230, 0.230, 0.200, 0.160, 0.150, 0.140, 0.110, 0.100, 0.100, 0.100, 0.060,
            0.040, 0.040, 0.040, 0.040, 0.030, 0.010, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
            0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
        ];

        const EXPECTED_RES: [f64; 180] = [
            1.0, 3.0, 5.0, 8.0, 10.0, 12.0, 15.0, 17.0, 20.0, 22.0, 24.0, 24.0, 29.0, 29.0, 34.0,
            36.0, 39.0, 41.0, 43.0, 46.0, 48.0, 48.0, 53.0, 55.0, 58.0, 58.0, 58.0, 65.0, 67.0,
            70.0, 72.0, 74.0, 77.0, 77.0, 77.0, 84.0, 86.0, 86.0, 86.0, 86.0, 96.0, 98.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0,
            100.0, 100.0, 100.0, 100.0, 100.0,
        ];
        let mut res = [f64::NAN; DATA.len()];
        let mpt = MPTCalculator::from_v(&DATA);
        let err = mpt.rank(5, &mut res);
        assert_eq!(
            err == Errors::ClErrorCodeNoError
                && MPTCalculator::is_eq_double_array(&res, &EXPECTED_RES),
            true
        );
    }

    #[test]
    fn should_correct_rank_position() {
        const DATA: [f64; 382] = [
            -6.50577, -4.51011, -7.07965, -5.65657, -4.98084, -6.32411, -4.69027, -8.58995,
            -6.29921, -5.322586, -6.47292, -7.15596, -7.75463, -5.665036, -5.99415, -5.84795,
            -4.68019, -4.68019, -6.11746, -4.82612, -6.33803, -7.41139, -6.00667, -6.28218,
            -8.84354, -8.66808, -6.814, -3.98489, -6.31164, -7.42794, -5.65416, -4.71698, -6.41638,
            -5.40541, -4.874457, -4.21607, -5.55556, -5.01882, -4.53125, -5.23918, -8.75203,
            -6.43432, -7.43671, -6.63507, -3.35135, -11.21951, -5.71429, -6.42276, -3.98909,
            -4.02597, -7.0632, -5.86767, -6.61831, -4.812467, -6.43432, -5.04386, -5.716599, -5.84,
            -5.76577, -3.93836, -4.83749, -7.11111, -6.07477, -4.694841, -6.06725, -5.32258,
            -6.043512, -6.96296, -3.96175, -5.65111, -6.55885, -7.85276, -7.05882, -6.32754,
            -6.44666, -4.850213, -6.43631, -5.80808, -4.59402, -8.49546, -3.64964, -4.80816,
            -3.71267, -7.07965, -5.43188, -2.908285, -4.65116, -6.51409, -5.54324, -6.10022,
            -6.27954, -4.68933, -0.2309446, -7.77903, -6.14035, -5.6872, -4.01009, -4.81246,
            -5.437795, -4.545457, -1.61858, -5.73806, -6.62252, -6.98878, -1.618582, -6.33803,
            -3.99454, -5.714292, -4.20463, -4.6875, -4.532588, -6.38298, -1.55258, -5.28351,
            -7.48466, -6.47292, -4.83651, -5.04951, -3.82883, -4.216872, -4.016486, -5.47667,
            -5.815833, -4.2735, -4.38067, -5.143343, -4.008915, -3.99449, -5.6338, -3.738323,
            -6.141734, -5.39262, -5.81583, -6.27954, -6.08696, -8.04795, -3.347732, -7.02988,
            -7.33229, -2.15385, -5.6541, -7.42794, -7.06215, -6.20805, -5.89226, -5.17435,
            -5.444654, -3.34773, -7.55668, -3.96988, -5.46559, -4.983396, -6.03654, -5.43779,
            -3.994543, -6.59341, -4.82456, -6.37623, -3.698444, -6.07477, -6.32411, -0.230949,
            -6.02583, -6.9869, -4.67797, -4.694849, -5.20951, -6.100223, -5.78778, -6.32384,
            -7.77903, -3.74153, -14.43396, -6.46976, -4.694845, -6.01156, -3.347728, -4.74865,
            -4.64701, -6.11354, -4.79651, -4.21687, -4.796514, -6.7029, -0.230952, -4.53401,
            -4.98339, -5.83039, -5.66667, -4.89796, -8.90688, -4.14747, -4.03121, -6.22951,
            -9.25197, -5.74163, -5.81015, -6.06509, -6.22951, -4.545465, -4.7191, -4.694844,
            -6.64858, -6.14173, -6.62983, -6.030154, -3.344123, -4.6729, -3.33817, -5.74074,
            -7.12166, -4.8855, -4.99168, -4.532581, -4.24028, -6.98497, -4.29066, -5.89286,
            -6.72116, -5.7508, -5.02901, -4.20223, -5.03324, -4.92958, -4.050283, -3.36257,
            -6.043515, -4.078084, -3.73832, -5.714295, -5.15638, -3.85064, 0.000004, -6.35135,
            -3.73396, -4.35459, -4.00276, -4.88911, -5.049514, -1.65587, 0.000001, -6.3762,
            -6.37625, -3.79032, -7.75463, -4.00891, -6.44139, -5.85366, -5.847957, -6.8917,
            -5.61331, -6.49606, -2.15606, -3.69844, -4.21348, -5.444651, -6.67285, -4.56522,
            -4.85021, -4.969883, -4.51941, -5.95745, -6.37627, -4.532585, -5.25409, -4.05028,
            -5.31972, -6.10221, -4.8583, -5.63486, -5.77532, -5.44355, -4.23729, -4.545463,
            -3.73514, -6.62983, -4.59402, -4.08587, -4.98915, -5.3442, -5.47599, -5.5371,
            -11.16585, -5.85284, -4.7486, -5.808085, -4.49612, -4.64701, -2.52226, -7.40203,
            -4.71914, -5.37736, -6.9869, -6.74419, -6.60793, -6.39778, -4.69531, -4.57143,
            -4.59588, -5.23156, -6.100227, -4.87445, -4.0602, -5.651113, -6.42202, -4.22961,
            -6.13139, -3.34412, -5.263168, -7.06215, -5.665031, -5.6664, -5.775323, -3.8961,
            -1.65468, 0.000003, -6.60634, -7.79377, -5.46875, -5.14334, -6.043514, -4.52261,
            -5.36364, -6.44905, -7.84077, -4.01786, -5.69767, -6.44258, -5.679014, -3.67107,
            -5.73248, -6.46976, -5.91667, -1.61744, -6.1017, -7.4392, -4.19274, -6.060618,
            -6.55629, -6.93493, -3.7415, -6.03015, -8.04795, -8.66808, -3.84615, -5.69823,
            -4.202231, -6.74646, -5.36981, -5.08021, -5.38922, -5.85664, -5.67901, -6.60793,
            -4.07808, -5.21814, -6.30841, -6.06509, -5.96798, -4.01648, -4.75515, -4.545461,
            -4.48808, -2.90828, -6.54122, -6.48801, -5.87276, -6.58135, -5.2921, -5.8156, -4.42478,
            -7.27532, -5.60579, -7.88177, -5.82121, -6.48749, -5.665035, -3.45821, -5.444657,
            -5.26316, -5.87558, 0.000007,
        ];
        let mut res = f64::NAN;
        let mpt = MPTCalculator::from_v(&DATA);
        let err = mpt.rank_position(-6.406382, 2, &mut res);
        assert_eq!(
            err == Errors::ClErrorCodeNoError && MPTCalculator::is_eq_double(res, 87.0),
            true
        );
    }
    #[test]
    fn should_correct_absolute_rank() {
        const EXPECTED_RES: [f64; 382] = [
            67.0, 84.0, 241.0, 168.0, 39.0, 262.0, 211.0, 198.0, 305.0, 12.0, 339.0, 30.0, 275.0,
            110.0, 103.0, 312.0, 5.0, 374.0, 224.0, 299.0, 87.0, 191.0, 284.0, 206.0, 253.0, 301.0,
            275.0, 260.0, 270.0, 73.0, 236.0, 99.0, 182.0, 52.0, 209.0, 127.0, 201.0, 299.0, 154.0,
            374.0, 1.0, 216.0, 252.0, 17.0, 135.0, 1.0, 323.0, 30.0, 369.0, 164.0, 64.0, 269.0,
            164.0, 172.0, 55.0, 149.0, 15.0, 253.0, 373.0, 28.0, 155.0, 291.0, 280.0, 94.0, 360.0,
            334.0, 382.0, 151.0, 290.0, 107.0, 378.0, 90.0, 159.0, 13.0, 224.0, 318.0, 112.0,
            341.0, 267.0, 344.0, 377.0, 196.0, 49.0, 141.0, 201.0, 362.0, 124.0, 113.0, 174.0,
            361.0, 16.0, 257.0, 376.0, 32.0, 188.0, 380.0, 22.0, 63.0, 287.0, 176.0, 325.0, 126.0,
            90.0, 179.0, 108.0, 218.0, 20.0, 56.0, 48.0, 179.0, 353.0, 215.0, 119.0, 211.0, 349.0,
            58.0, 34.0, 271.0, 182.0, 336.0, 136.0, 368.0, 40.0, 26.0, 253.0, 50.0, 295.0, 201.0,
            332.0, 124.0, 118.0, 217.0, 66.0, 19.0, 17.0, 158.0, 249.0, 47.0, 274.0, 1.0, 335.0,
            316.0, 144.0, 81.0, 146.0, 282.0, 346.0, 343.0, 5.0, 106.0, 370.0, 196.0, 356.0, 294.0,
            69.0, 330.0, 148.0, 298.0, 325.0, 319.0, 356.0, 35.0, 93.0, 315.0, 103.0, 140.0, 297.0,
            113.0, 302.0, 263.0, 327.0, 314.0, 321.0, 88.0, 38.0, 79.0, 211.0, 246.0, 199.0, 72.0,
            53.0, 308.0, 279.0, 233.0, 344.0, 185.0, 150.0, 117.0, 272.0, 292.0, 277.0, 162.0,
            131.0, 169.0, 242.0, 205.0, 163.0, 277.0, 289.0, 372.0, 233.0, 22.0, 94.0, 306.0,
            238.0, 259.0, 310.0, 328.0, 59.0, 83.0, 152.0, 239.0, 287.0, 61.0, 98.0, 313.0, 284.0,
            8.0, 144.0, 121.0, 80.0, 304.0, 351.0, 230.0, 129.0, 130.0, 381.0, 342.0, 235.0, 194.0,
            268.0, 244.0, 379.0, 214.0, 321.0, 247.0, 232.0, 85.0, 94.0, 182.0, 133.0, 22.0, 160.0,
            187.0, 228.0, 132.0, 303.0, 20.0, 100.0, 317.0, 347.0, 64.0, 177.0, 266.0, 281.0,
            142.0, 293.0, 105.0, 1.0, 155.0, 227.0, 50.0, 61.0, 195.0, 250.0, 272.0, 219.0, 181.0,
            111.0, 147.0, 296.0, 122.0, 167.0, 123.0, 190.0, 29.0, 90.0, 113.0, 44.0, 221.0, 41.0,
            250.0, 263.0, 53.0, 10.0, 263.0, 370.0, 175.0, 248.0, 339.0, 69.0, 136.0, 192.0, 329.0,
            14.0, 10.0, 311.0, 138.0, 226.0, 43.0, 35.0, 347.0, 306.0, 324.0, 77.0, 143.0, 204.0,
            367.0, 283.0, 139.0, 42.0, 133.0, 74.0, 56.0, 355.0, 46.0, 358.0, 108.0, 74.0, 193.0,
            221.0, 352.0, 350.0, 240.0, 237.0, 220.0, 166.0, 102.0, 228.0, 157.0, 178.0, 37.0,
            25.0, 82.0, 120.0, 200.0, 338.0, 100.0, 171.0, 366.0, 256.0, 161.0, 223.0, 210.0,
            308.0, 27.0, 78.0, 331.0, 86.0, 76.0, 286.0, 208.0, 337.0, 68.0, 206.0, 186.0, 333.0,
            189.0, 354.0, 364.0, 320.0, 359.0, 33.0, 257.0, 364.0, 169.0, 60.0, 45.0, 5.0, 260.0,
            243.0, 245.0, 113.0, 9.0, 89.0, 94.0, 152.0, 71.0, 127.0, 231.0, 362.0, 173.0,
        ];

        const DATA: [f64; 382] = [
            -4.14747, -4.48808, -5.89226, -5.31972, -3.79032, -6.08696, -5.714292, -5.6541,
            -6.44905, -1.65468, -6.9869, -3.698444, -6.22951, -4.6875, -4.64701, -6.49606,
            -0.230949, -8.66808, -5.80808, -6.43432, -4.51941, -5.55556, -6.32411, -5.67901,
            -6.043512, -6.43631, -6.22951, -6.07477, -6.13139, -4.21607, -5.85366, -4.57143,
            -5.444657, -4.00276, -5.69767, -4.812467, -5.665031, -6.43432, -5.08021, -8.66808,
            0.000003, -5.73806, -6.03654, -2.908285, -4.8583, 0.000007, -6.61831, -3.69844,
            -7.88177, -5.26316, -4.07808, -6.11746, -5.263168, -5.36364, -4.01009, -5.02901,
            -2.15606, -6.043514, -8.58995, -3.64964, -5.143343, -6.37623, -6.29921, -4.545463,
            -7.48466, -6.814, -14.43396, -5.04386, -6.3762, -4.67797, -8.90688, -4.532588,
            -5.20951, -1.65587, -5.808085, -6.58135, -4.69027, -6.98878, -6.10221, -7.06215,
            -8.84354, -5.65111, -3.99449, -4.92958, -5.665036, -7.75463, -4.79651, -4.694849,
            -5.37736, -7.55668, -2.52226, -6.06509, -8.75203, -3.71267, -5.47667, -11.16585,
            -3.347732, -4.0602, -6.33803, -5.39262, -6.62983, -4.80816, -4.532581, -5.437795,
            -4.68019, -5.74163, -3.344123, -4.01648, -3.98909, -5.43779, -7.33229, -5.73248,
            -4.7191, -5.714295, -7.11111, -4.01786, -3.73514, -6.14035, -5.444654, -6.93493,
            -4.87445, -7.85276, -3.82883, -3.36257, -6.043515, -3.994543, -6.39778, -5.665035,
            -6.74419, -4.796514, -4.71698, -5.74074, -4.08587, -3.33817, -2.90828, -5.17435,
            -6.02583, -3.98489, -6.20805, 0.000004, -6.8917, -6.55629, -4.983396, -4.35459,
            -4.98915, -6.31164, -7.0632, -7.05882, -0.2309446, -4.6729, -8.04795, -5.651113,
            -7.42794, -6.38298, -4.202231, -6.7029, -5.01882, -6.42276, -6.62983, -6.59341,
            -7.42794, -3.73832, -4.53401, -6.54122, -4.64701, -4.89796, -6.42202, -4.694841,
            -6.44139, -6.100223, -6.63507, -6.51409, -6.60793, -4.52261, -3.74153, -4.2735,
            -5.71429, -5.99415, -5.65416, -4.21348, -4.00891, -6.47292, -6.28218, -5.847957,
            -7.06215, -5.46559, -5.03324, -4.69531, -6.14173, -6.37625, -6.27954, -5.23918,
            -4.83651, -5.32258, -5.89286, -5.66667, -5.25409, -6.27954, -6.35135, -8.49546,
            -5.84795, -3.34773, -4.545461, -6.46976, -5.86767, -6.06725, -6.48749, -6.64858,
            -4.02597, -4.42478, -5.049514, -5.87276, -6.33803, -4.050283, -4.56522, -6.50577,
            -6.32411, -1.55258, -4.98339, -4.7486, -4.29066, -6.44666, -7.15596, -5.82121,
            -4.82456, -4.82612, -11.21951, -7.02988, -5.85284, -5.6338, -6.11354, -5.95745,
            -9.25197, -5.716599, -6.60793, -6.00667, -5.84, -4.49612, -4.545457, -5.444651,
            -4.85021, -3.347728, -5.21814, -5.47599, -5.81583, -4.83749, -6.44258, -3.34412,
            -4.59402, -6.55885, -7.07965, -4.078084, -5.40541, -6.1017, -6.30841, -4.969883,
            -6.37627, -4.65116, 0.000001, -5.14334, -5.8156, -3.99454, -4.05028, -5.63486,
            -6.03015, -6.141734, -5.7508, -5.44355, -4.68933, -4.99168, -6.41638, -4.74865,
            -5.2921, -4.75515, -5.54324, -3.67107, -4.532585, -4.694844, -3.93836, -5.775323,
            -3.84615, -6.030154, -6.100227, -4.008915, -1.618582, -6.10022, -8.04795, -5.38922,
            -6.01156, -6.9869, -4.20223, -4.874457, -5.60579, -6.67285, -2.15385, -1.61858,
            -6.48801, -4.8855, -5.81015, -3.8961, -3.738323, -7.07965, -6.46976, -6.62252,
            -4.23729, -4.98084, -5.6664, -7.84077, -6.32384, -4.88911, -3.85064, -4.850213,
            -4.216872, -4.016486, -7.41139, -3.96988, -7.43671, -4.68019, -4.21687, -5.61331,
            -5.77532, -7.27532, -7.12166, -5.87558, -5.85664, -5.76577, -5.28351, -4.59588,
            -5.815833, -5.15638, -5.43188, -3.7415, -3.35135, -4.38067, -4.71914, -5.65657,
            -6.98497, -4.59402, -5.3442, -7.79377, -6.060618, -5.23156, -5.78778, -5.69823,
            -6.47292, -3.45821, -4.24028, -6.72116, -4.51011, -4.22961, -6.32754, -5.6872,
            -6.96296, -4.19274, -5.679014, -5.46875, -6.74646, -5.5371, -7.40203, -7.77903,
            -6.60634, -7.4392, -3.73396, -6.06509, -7.77903, -5.322586, -4.03121, -3.96175,
            -0.230952, -6.07477, -5.91667, -5.96798, -4.694845, -1.61744, -4.53125, -4.545465,
            -5.04951, -4.20463, -4.81246, -5.83039, -7.75463, -5.36981,
        ];
        let mut res = [f64::NAN; DATA.len()];
        let mpt = MPTCalculator::from_v(&DATA);
        let err = mpt.absolute_rank(&[0.0; 0], false, &mut res);
        println!("{:?}", res);
        assert_eq!(
            err == Errors::ClErrorCodeNoError
                && MPTCalculator::is_eq_double_array(&res, &EXPECTED_RES),
            true
        );
    }
    #[test]
    fn should_correct_percentile_rank_breakpoints() {
        const DATA: [f64; 382] = [
            0.0, 0.0, 0.0, 0.0, -0.23095, -0.23095, -0.23095, -1.55258, -1.61744, -1.61858,
            -1.61858, -1.65468, -1.65587, -2.15385, -2.15606, -2.52226, -2.90828, -2.90828,
            -3.33817, -3.34412, -3.34412, -3.34773, -3.34773, -3.34773, -3.35135, -3.36257,
            -3.45821, -3.64964, -3.67107, -3.69844, -3.69844, -3.71267, -3.73396, -3.73514,
            -3.73832, -3.73832, -3.7415, -3.7415, -3.79032, -3.82883, -3.84615, -3.85064, -3.8961,
            -3.93836, -3.96175, -3.96988, -3.98489, -3.98909, -3.99449, -3.99454, -3.99454,
            -4.00276, -4.00891, -4.00891, -4.01009, -4.01648, -4.01648, -4.01786, -4.02597,
            -4.03121, -4.05028, -4.05028, -4.0602, -4.07808, -4.07808, -4.08587, -4.14747,
            -4.19274, -4.20223, -4.20223, -4.20463, -4.21348, -4.21607, -4.21687, -4.21687,
            -4.22961, -4.23729, -4.24028, -4.2735, -4.29066, -4.35459, -4.38067, -4.42478,
            -4.48808, -4.49612, -4.51011, -4.51941, -4.52261, -4.53125, -4.53258, -4.53258,
            -4.53258, -4.53401, -4.54546, -4.54546, -4.54546, -4.54546, -4.56522, -4.57143,
            -4.59402, -4.59402, -4.59588, -4.64701, -4.64701, -4.65116, -4.6729, -4.67797,
            -4.68019, -4.68019, -4.6875, -4.68933, -4.69027, -4.69484, -4.69484, -4.69484,
            -4.69484, -4.69531, -4.71698, -4.7191, -4.7191, -4.7486, -4.7486, -4.75515, -4.79651,
            -4.79651, -4.80816, -4.81246, -4.81246, -4.82456, -4.82612, -4.83651, -4.83749,
            -4.85021, -4.85021, -4.8583, -4.87445, -4.87445, -4.8855, -4.88911, -4.89796, -4.92958,
            -4.96988, -4.98084, -4.98339, -4.98339, -4.98915, -4.99168, -5.01882, -5.02901,
            -5.03324, -5.04386, -5.04951, -5.04951, -5.08021, -5.14334, -5.14334, -5.15638,
            -5.17435, -5.20951, -5.21814, -5.23156, -5.23918, -5.25409, -5.26316, -5.26316,
            -5.28351, -5.2921, -5.31972, -5.32258, -5.32258, -5.3442, -5.36364, -5.36981, -5.37736,
            -5.38922, -5.39262, -5.40541, -5.43188, -5.43779, -5.43779, -5.44355, -5.44465,
            -5.44465, -5.44465, -5.46559, -5.46875, -5.47599, -5.47667, -5.5371, -5.54324,
            -5.55556, -5.60579, -5.61331, -5.6338, -5.63486, -5.65111, -5.65111, -5.6541, -5.6541,
            -5.65657, -5.66503, -5.66503, -5.66503, -5.6664, -5.66667, -5.67901, -5.67901, -5.6872,
            -5.69767, -5.69823, -5.71429, -5.71429, -5.71429, -5.71659, -5.73248, -5.73806,
            -5.74074, -5.74163, -5.7508, -5.76577, -5.77532, -5.77532, -5.78778, -5.80808,
            -5.80808, -5.81015, -5.8156, -5.81583, -5.81583, -5.82121, -5.83039, -5.84, -5.84795,
            -5.84795, -5.85284, -5.85366, -5.85664, -5.86767, -5.87276, -5.87558, -5.89226,
            -5.89286, -5.91667, -5.95745, -5.96798, -5.99415, -6.00667, -6.01156, -6.02583,
            -6.03015, -6.03015, -6.03654, -6.04351, -6.04351, -6.04351, -6.06061, -6.06509,
            -6.06509, -6.06725, -6.07477, -6.07477, -6.08696, -6.10022, -6.10022, -6.10022,
            -6.1017, -6.10221, -6.11354, -6.11746, -6.13139, -6.14035, -6.14173, -6.14173,
            -6.20805, -6.22951, -6.22951, -6.27954, -6.27954, -6.28218, -6.29921, -6.30841,
            -6.31164, -6.32384, -6.32411, -6.32411, -6.32754, -6.33803, -6.33803, -6.35135,
            -6.3762, -6.3762, -6.3762, -6.3762, -6.38298, -6.39778, -6.41638, -6.42202, -6.42276,
            -6.43432, -6.43432, -6.43631, -6.44139, -6.44258, -6.44666, -6.44905, -6.46976,
            -6.46976, -6.47292, -6.47292, -6.48749, -6.48801, -6.49606, -6.50577, -6.51409,
            -6.54122, -6.55629, -6.55885, -6.58135, -6.59341, -6.60634, -6.60793, -6.60793,
            -6.61831, -6.62252, -6.62983, -6.62983, -6.63507, -6.64858, -6.67285, -6.7029,
            -6.72116, -6.74419, -6.74646, -6.814, -6.8917, -6.93493, -6.96296, -6.98497, -6.9869,
            -6.9869, -6.98878, -7.02988, -7.05882, -7.06215, -7.06215, -7.0632, -7.07965, -7.07965,
            -7.11111, -7.12166, -7.15596, -7.27532, -7.33229, -7.40203, -7.41139, -7.42794,
            -7.42794, -7.43671, -7.4392, -7.48466, -7.55668, -7.75463, -7.75463, -7.77903,
            -7.77903, -7.79377, -7.84077, -7.85276, -7.88177, -8.04795, -8.04795, -8.49546,
            -8.58995, -8.66808, -8.66808, -8.75203, -8.84354, -8.90688, -9.25197, -11.16585,
            -11.21951, -14.43396,
        ];

        const EXPECTED_RES: [f64; 100] = [
            0.0, -1.55258, -1.65468, -2.52226, -3.34412, -3.34773, -3.45821, -3.69844, -3.73832,
            -3.79032, -3.85064, -3.96988, -3.99454, -4.00891, -4.01786, -4.05028, -4.07808,
            -4.20223, -4.21607, -4.23729, -4.35459, -4.48808, -4.52261, -4.53258, -4.54546,
            -4.59402, -4.64701, -4.67797, -4.68933, -4.69484, -4.7191, -4.7486, -4.80816, -4.82612,
            -4.85021, -4.8855, -4.92958, -4.98339, -5.02901, -5.04951, -5.15638, -5.23156,
            -5.26316, -5.31972, -5.36364, -5.39262, -5.43779, -5.44465, -5.47599, -5.55556,
            -5.63486, -5.6541, -5.66503, -5.67901, -5.69823, -5.71659, -5.74163, -5.77532,
            -5.80808, -5.81583, -5.84795, -5.85664, -5.89226, -5.95745, -6.01156, -6.03654,
            -6.06061, -6.07477, -6.10022, -6.10221, -6.14035, -6.22951, -6.28218, -6.31164,
            -6.32754, -6.3762, -6.38298, -6.42276, -6.43631, -6.44905, -6.47292, -6.50577,
            -6.55885, -6.60793, -6.62252, -6.64858, -6.74419, -6.93493, -6.9869, -7.05882,
            -7.07965, -7.15596, -7.41139, -7.4392, -7.75463, -7.79377, -8.04795, -8.66808,
            -8.90688, -14.43396,
        ];
        let mut res = [f64::NAN; 100];
        let mpt = MPTCalculator::from_v(&DATA);
        let err = mpt.percentile_rank_breakpoints(&[f64::NAN; 0], false, &mut res);
        assert_eq!(
            err == Errors::ClErrorCodeNoError
                && MPTCalculator::is_eq_double_array(&res, &EXPECTED_RES),
            true
        );
    }
}
